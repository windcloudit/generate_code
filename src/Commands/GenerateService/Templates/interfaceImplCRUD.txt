<?php

declare(strict_types=1);

/**
 * Copyright (c) 2019 Musashino Project. All rights reserved.
 * -------------------------------------------------------------------------------------------------------------
 * NOTICE:  All information contained herein is, and remains
 * the property of Persol Process & Technology Vietnam and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Persol Process & Technology Vietnam
 * and its suppliers and may be covered by Vietnamese Law,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Persol Process & Technology Vietnam.
 */

namespace App\Services\{serviceName}Service;

use App\Repositories\{repositoryName}\{repositoryName};
use App\Models\{modelName}Model;
use Exception;

/**
 *  Class {serviceName}ServiceImpl
 *
 * @category   \App
 * @package    \App\Services
 * @author     Persol team
 * @copyright  2018 PERSOL PROCESS & TECHNOLOGY VIETNAM CO., LTD.
 * @version    1.0
 * @link       https://ppt-gbc.backlog.com/git/DEV_MUSASINO/musashino_BE.git
 * @see        {serviceName}ServiceImpl.php
 * @since      File available since Release 1.0
 */
class {serviceName}ServiceImpl implements {serviceName}Service
{
    /**
     * @var {repositoryName}
     */
    private {repositoryName} ${repositoryNameCamel};

    /**
     * {serviceName}ServiceImpl constructor.
     * @param {repositoryName} ${repositoryNameCamel}
     */
    public function __construct({repositoryName} ${repositoryNameCamel})
    {
        $this->{repositoryNameCamel} = ${repositoryNameCamel};
    }

    /**
     * Function use for create new {modelName}
     * @author: Persol team
     *
     * @param array ${modelNameCamel}Attribute
     *
     * @return {modelName}Model|bool
     * @throws Exception
     */
    public function create{modelName}(array ${modelNameCamel}Attribute): ?{modelName}Model
    {
        try {
            ${modelNameCamel} = new {modelName}Model(${modelNameCamel}Attribute);
            $result = $this->{repositoryNameCamel}->save{modelName}(${modelNameCamel});
            if ($result === false) {
                throw new \RuntimeException(__('Create {modelName} is not successful'));
            }
            return ${modelNameCamel};
        } catch (\Exception $exception) {
            throw $exception;
        }
    }

    /**
     * Function use for get a {modelName} by id
     * @author: Persol team
     *
     * @param int $id
     *
     * @return {modelName}Model|bool
     * @throws Exception
     */
    public function get{modelName}ById(int $id): ?{modelName}Model
    {
        try {
            /**@var {modelName}Model ${modelNameCamel} */
            ${modelNameCamel} = $this->{repositoryNameCamel}->getById($id);
            if (${modelNameCamel} === null) {
               throw new \RuntimeException(__('Can not found {modelName} with id :id in database', ['id' => $id]));
            }
            return ${modelNameCamel};
        } catch (\Exception $exception) {
            throw $exception;
        }
    }

    /**
     * Function use for edit {modelName}
     * @author: Persol team
     *
     * @param int $id
     * @param array ${modelNameCamel}Attribute
     *
     * @return {modelName}Model|bool
     * @throws Exception
     */
    public function update{modelName}(int $id, array ${modelNameCamel}Attribute): ?{modelName}Model
    {
        try {
            /**@var {modelName}Model ${modelNameCamel} */
            ${modelNameCamel} = $this->{repositoryNameCamel}->getById($id);
            if (${modelNameCamel} === null) {
                throw new \RuntimeException(__('Can not found {modelName} with id :id in database', ['id' => $id]));
            }
            ${modelNameCamel}->fill(${modelNameCamel}Attribute);
            $result = $this->{repositoryNameCamel}->save{modelName}(${modelNameCamel});
            if ($result === false) {
                throw new \RuntimeException(__('Create {modelName} is not successful'));
            }
            return ${modelNameCamel};
        } catch (\Exception $exception) {
            throw $exception;
        }
    }

    /**
     * Function use for delete a {modelName} by id
     * @author: Persol team
     *
     * @param int $id
     *
     * @return bool|null
     * @throws Exception
     */
    public function delete{modelName}(int $id): ?bool
    {
        try {
            return $this->{repositoryNameCamel}->deleteById($id);
        } catch (\Exception $exception) {
            throw $exception;
        }
    }
}
